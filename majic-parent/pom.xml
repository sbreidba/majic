<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <!-- do not specify a parent here - that causes problems with the site plugin -->

    <!-- majic-documentation:gavc -->
    <groupId>com.sri.vt.majic</groupId>
    <artifactId>majic-parent</artifactId>
    <version>0.2.1-SNAPSHOT</version>
    <packaging>pom</packaging>
    <!-- majic-documentation:gavc -->
    <name>Majic Parent POM</name>
    
    <description>
        This pom file contains properties and settings common to all Majic projects.
    </description>
    
    <organization>
        <name>SRI Vision Technologies Lab</name>
        <url>https://wiki.sri.com/display/VT/Home</url>
    </organization>

    <prerequisites>
        <maven>3.0.5</maven>
    </prerequisites>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <detected.cmake.os>unknown</detected.cmake.os>
        <detected.cmake.compiler>unknown</detected.cmake.compiler>
      
        <default.cmake.arch>64</default.cmake.arch>
        
        <!-- majic-documentation:properties -->
        <!-- The package classifier is the default classifier for the detected platform.
             For example: 'win7-vc2010-64'. Some artifacts (vtcmake, for example) are built
             with other classifiers; see the individual artifact definition for more information.
        -->
        <majic.package.classifier>${cmake.os}-${cmake.compiler}-${cmake.arch}</majic.package.classifier>

        <!-- The package extension is the default extension for Majic artifacts. Using this
             property is encouraged as the default extension may change in the future. -->
        <majic.package.extension>tar.bz2</majic.package.extension>
        <!-- majic-documentation:properties -->

        <!-- set up defaults; this allows child poms to either:
             - just use the defaults
             - completely override the defaults
             - append (or prepend) to the defaults, e.g.
                < cmake.vars.gcc.32 >${default.cmake.vars.gcc.32}< /cmake.vars.gcc.32 >
        -->
        <default.cmake.vars.gcc.32>-DCMAKE_C_FLAGS=-m32 -DCMAKE_CXX_FLAGS=-m32</default.cmake.vars.gcc.32>

        <cmake.vars.gcc.32>${default.cmake.vars.gcc.32}</cmake.vars.gcc.32>
    </properties>

    <build>
        <!-- 
        The project bin directory, when computed, is relative. This is because Maven will treat
        the macro as a relative path (since it is not yet expanded/in existence), then append the
        expanded value to the basedir, leading to paths like
           c:\project\source\c:\project\source-build
        If we use a relative path, the dir is uglier, but correct, for
        example,
           c:\project\source\..\source-build
        -->
        <directory>${cmake.project.bin.directory}</directory>
        
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>com.sri.vt.majic</groupId>
                    <artifactId>build-helper-maven-plugin</artifactId>
                    <extensions>true</extensions>
                    <version>0.2.1-SNAPSHOT</version>
                </plugin>

                <!-- needed for the majic build-helper -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>1.2.1</version>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <!--
    Note: compiler and detection must be done here, and not in the plugin.
    This is because all variables that affect dependency resolution must be
    resolvable without plugin interaction, as that occurs too late.

    Properties derived from ${cmake.compiler}, etc. are found within the plugin;
    it's simpler to put that sort of logic there - it's difficult to make
    maven variables conditional on other variables without Ant hackery.

    But that means there's code in two places. If this section gets modified
    please check the BuildEnvironment class to see if modifications need to be made
    in the Java code as well.
    -->
    <profiles>
        <profile>
            <id>detected-os-win7</id>
            <activation>
                <os>
                    <family>windows</family>
                    <name>windows 7</name>
                </os>
            </activation>
            <properties>
                <detected.cmake.os>win7</detected.cmake.os>
            </properties>
        </profile>

        <profile>
            <!--
            the activation here is clearly too simple, but there are few options.
            it's possible that the <version> could be used to distinguish variants/major versions
            but I don't know how to map 2.6.32-358.18.1.el6.x86_64 to "centos6".
            -->
            <id>detected-os-centos6</id>
            <activation>
                <os>
                    <family>unix</family>
                    <name>linux</name>
                </os>
            </activation>
            <properties>
                <detected.cmake.os>centos6</detected.cmake.os>
            </properties>
        </profile>

        <profile>
            <id>detected-compiler-gcc</id>
            <activation>
                <os>
                    <family>unix</family>
                    <name>linux</name>
                </os>
            </activation>
            <properties>
                <detected.cmake.compiler>gcc</detected.cmake.compiler>
            </properties>
        </profile>

        <profile>
            <id>detected-compiler-vc2008</id>
            <activation>
                <property>
                    <name>env.VS80COMNTOOLS</name>
                </property>
            </activation>
            <properties>
                <detected.cmake.compiler>vc2008</detected.cmake.compiler>
            </properties>
        </profile>

        <profile>
            <id>detected-compiler-vc2009</id>
            <activation>
                <property>
                    <name>env.VS90COMNTOOLS</name>
                </property>
            </activation>
            <properties>
                <detected.cmake.compiler>vc2009</detected.cmake.compiler>
            </properties>
        </profile>

        <!-- majic-documentation:compiler-profile-example -->
        <profile>
            <id>detected-compiler-vc2010</id>
            <activation>
                <property>
                    <name>env.VS100COMNTOOLS</name>
                </property>
            </activation>
            <properties>
                <detected.cmake.compiler>vc2010</detected.cmake.compiler>
            </properties>
        </profile>
        <!-- majic-documentation:compiler-profile-example -->

        <profile>
            <id>detected-compiler-vc2012</id>
            <activation>
                <property>
                    <name>env.VS110COMNTOOLS</name>
                </property>
            </activation>
            <properties>
                <detected.cmake.compiler>vc2012</detected.cmake.compiler>
            </properties>
        </profile>

        <!-- cmake.compiler: if no command-line property was set, use the auto-detected value -->
        <profile>
            <id>auto-detect-compiler</id>
            <activation>
                <property>
                    <name>!cmake.compiler</name>
                </property>
            </activation>
            <properties>
                <cmake.compiler>${detected.cmake.compiler}</cmake.compiler>
            </properties>
        </profile>

        <profile>
            <id>auto-detect-os</id>
            <activation>
                <property>
                    <name>!cmake.os</name>
                </property>
            </activation>
            <properties>
                <cmake.os>${detected.cmake.os}</cmake.os>
            </properties>
        </profile>

        <!-- cmake.arch: if no command-line property was set, use the default value -->
        <profile>
            <id>default-arch</id>
            <activation>
                <property>
                    <name>!cmake.arch</name>
                </property>
            </activation>
            <properties>
                <cmake.arch>${default.cmake.arch}</cmake.arch>
            </properties>
        </profile>

        <!-- Either majic.prune.repo or majic.prune.repo.full will enable pruning.
           If majic.prune.repo.full is specified, *all* versions of the artifact
           are pruned.
           -->
        <profile>
            <id>prune-repo</id>
            <activation>
                <property>
                    <name>majic.prune.repo</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <version>1.7</version>
                        <executions>
                            <execution>
                                <id>remove-old-artifacts</id>
                                <goals>
                                    <goal>remove-project-artifact</goal>
                                </goals>
                                <configuration>
                                    <removeAll>false</removeAll>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>prune-repo-full</id>
            <activation>
                <property>
                    <name>majic.prune.repo.full</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <version>1.7</version>
                        <executions>
                            <execution>
                                <id>remove-old-artifacts</id>
                                <goals>
                                    <goal>remove-project-artifact</goal>
                                </goals>
                                <configuration>
                                    <removeAll>true</removeAll>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
